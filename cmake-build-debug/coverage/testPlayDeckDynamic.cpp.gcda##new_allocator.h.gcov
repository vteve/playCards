        -:    0:Source:C:/PROGRA~1/JETBRA~1/CLION2~1.1/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/ext/new_allocator.h
        -:    0:Graph:C:\Users\Alexander\CLionProjects\oop2\cmake-build-debug\tests\CMakeFiles\testPlayDeckDynamic.dir\testPlayDeckDynamic.cpp.gcno
        -:    0:Data:C:\Users\Alexander\CLionProjects\oop2\cmake-build-debug\tests\CMakeFiles\testPlayDeckDynamic.dir\testPlayDeckDynamic.cpp.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  /**
        -:   45:   *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
        -:   46:   *  @ingroup allocators
        -:   47:   *
        -:   48:   *  This is precisely the allocator defined in the C++ Standard.
        -:   49:   *    - all allocation calls operator new
        -:   50:   *    - all deallocation calls operator delete
        -:   51:   *
        -:   52:   *  @tparam  _Tp  Type of allocated object.
        -:   53:   */
        -:   54:  template<typename _Tp>
        -:   55:    class new_allocator
        -:   56:    {
        -:   57:    public:
        -:   58:      typedef _Tp        value_type;
        -:   59:      typedef std::size_t     size_type;
        -:   60:      typedef std::ptrdiff_t  difference_type;
        -:   61:#if __cplusplus <= 201703L
        -:   62:      typedef _Tp*       pointer;
        -:   63:      typedef const _Tp* const_pointer;
        -:   64:      typedef _Tp&       reference;
        -:   65:      typedef const _Tp& const_reference;
        -:   66:
        -:   67:      template<typename _Tp1>
        -:   68:	struct rebind
        -:   69:	{ typedef new_allocator<_Tp1> other; };
        -:   70:#endif
        -:   71:
        -:   72:#if __cplusplus >= 201103L
        -:   73:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   74:      // 2103. propagate_on_container_move_assignment
        -:   75:      typedef std::true_type propagate_on_container_move_assignment;
        -:   76:#endif
        -:   77:
        -:   78:      _GLIBCXX20_CONSTEXPR
     308*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEEC2Ev called 22 returned 100% blocks executed 100%
       22:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11NamePatternEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11NamePatternEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec15ExcludedPatternEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec15ExcludedPatternEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec10TagPatternEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec10TagPatternEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE7_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE7_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch16TestCaseTracking14SectionTrackerEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch16TestCaseTracking14SectionTrackerEEC2Ev called 22 returned 100% blocks executed 100%
       22:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS3_13JunitReporterEE11SectionNodeEESaIS8_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS3_13JunitReporterEE11SectionNodeEESaIS8_EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE8_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE8_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE9_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE9_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIdEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIdEEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIwEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIwEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev called 70 returned 100% blocks executed 100%
       70:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch9VerbosityEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch9VerbosityEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev called 3 returned 100% blocks executed 100%
        3:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail12BoundFlagRefEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail12BoundFlagRefEEC2Ev called 11 returned 100% blocks executed 100%
       11:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIyEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIyEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch10Generators16GeneratorTrackerEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch10Generators16GeneratorTrackerEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch6ConfigEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch6ConfigEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 4 returned 100% blocks executed 100%
        4:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 4 returned 100% blocks executed 100%
        4:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIlEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIlEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPlEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPlEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEEC2Ev called 6 returned 100% blocks executed 100%
        6:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIjEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIjEEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIxEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIxEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEEC2Ev called 1 returned 100% blocks executed 100%
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEEC2Ev called 6 returned 100% blocks executed 100%
        6:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEEC2Ev called 22 returned 100% blocks executed 100%
       22:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPcEC2Ev:
function _ZN9__gnu_cxx13new_allocatorIPcEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEEC2Ev called 44 returned 100% blocks executed 100%
       44:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEEC2Ev called 4 returned 100% blocks executed 100%
        4:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2Ev called 0 returned 0% blocks executed 0%
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEEC2Ev called 2 returned 100% blocks executed 100%
        2:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
        -:   81:      _GLIBCXX20_CONSTEXPR
    3153*:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEEC2ERKS3_ called 4 returned 100% blocks executed 100%
        4:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE7_EEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE7_EEEC2ERKS9_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail15BoundFlagLambdaIZNS3_4HelpC4ERbEUlbE_EEEC2ERKS9_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec10TagPatternEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec10TagPatternEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec15ExcludedPatternEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec15ExcludedPatternEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11NamePatternEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11NamePatternEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch16TestCaseTracking14SectionTrackerEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch16TestCaseTracking14SectionTrackerEEC2ERKS4_ called 66 returned 100% blocks executed 100%
       66:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch6ConfigEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch6ConfigEEC2ERKS3_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch10Generators16GeneratorTrackerEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch10Generators16GeneratorTrackerEEC2ERKS4_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail12BoundFlagRefEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail12BoundFlagRefEEC2ERKS5_ called 33 returned 100% blocks executed 100%
       33:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKSC_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKSC_ called 9 returned 100% blocks executed 100%
        9:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEEC2ERKS5_ called 1 returned 100% blocks executed 100%
        1:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEEC2ERKS6_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEEC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEEEC2ERKSF_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISB_EEEEEC2ERKSF_ called 6 returned 100% blocks executed 100%
        6:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEEC2ERKS4_ called 4 returned 100% blocks executed 100%
        4:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEEC2ERKS5_ called 8 returned 100% blocks executed 100%
        8:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2ERKS9_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_:
function _ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEEC2ERKS4_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch9VerbosityEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch9VerbosityEEC2ERKS3_ called 1 returned 100% blocks executed 100%
        1:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEEC2ERKS4_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEEC2ERKS4_ called 4 returned 100% blocks executed 100%
        4:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEEC2ERKS3_ called 4 returned 100% blocks executed 100%
        4:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_ called 2676 returned 100% blocks executed 100%
     2676:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEEC2ERKS5_ called 134 returned 100% blocks executed 100%
      134:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEEC2ERKS5_ called 134 returned 100% blocks executed 100%
      134:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEEC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEEC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE11SectionNodeEEC2ERKS6_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EEC2ERKS9_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2ERKS5_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEEC2ERKS5_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2ERKS3_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEEC2ERKS3_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2ERKS7_:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEEEC2ERKS7_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2ERKSI_:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEEC2ERKSI_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2ERKSD_:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEEC2ERKSD_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2ERKSD_:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEEC2ERKSD_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIxEEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIxEEEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIjEEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIjEEEC2ERKS6_ called 6 returned 100% blocks executed 100%
        6:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEC2ERKSD_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_12TestRunStatsENS5_INS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEEEC2ERKSD_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIdEEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail13BoundValueRefIdEEEC2ERKS6_ called 6 returned 100% blocks executed 100%
        6:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE9_EEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlbE9_EEEC2ERKS9_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE8_EEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUliE8_EEEC2ERKS9_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EEEC2ERKSH_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11BoundLambdaIZNS1_21makeCommandLineParserERNS1_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EEEC2ERKSH_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_11XmlReporterEE15ReporterFactoryEEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_13JunitReporterEE15ReporterFactoryEEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEC2ERKSB_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_14TestGroupStatsENS5_INS1_13TestCaseStatsENS4_11SectionNodeEEEEEEC2ERKSB_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEC2ERKS9_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch22CumulativeReporterBaseINS1_13JunitReporterEE4NodeINS1_13TestCaseStatsENS4_11SectionNodeEEEEC2ERKS9_ called 0 returned 0% blocks executed 0%
    #####:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15ConsoleReporterEE15ReporterFactoryEEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryEEC2ERKS6_:
function _ZN9__gnu_cxx13new_allocatorIN5Catch17ReporterRegistrarINS1_15CompactReporterEE15ReporterFactoryEEC2ERKS6_ called 3 returned 100% blocks executed 100%
        3:   82:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   83:
        -:   84:      template<typename _Tp1>
        -:   85:	_GLIBCXX20_CONSTEXPR
        -:   86:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   87:
        -:   88:#if __cplusplus <= 201703L
        -:   89:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        -:   90:
        -:   91:      pointer
        -:   92:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   93:      { return std::__addressof(__x); }
        -:   94:
        -:   95:      const_pointer
        -:   96:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   97:      { return std::__addressof(__x); }
        -:   98:#endif
        -:   99:
        -:  100:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  101:      // about what the return value is when __n == 0.
        -:  102:      _GLIBCXX_NODISCARD _Tp*
    2701*:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    2701*:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  116:	      std::__throw_bad_array_new_length();
    #####:  117:	    std::__throw_bad_alloc();
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    2701*:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIwE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIwE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPcE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE8allocateEyPKv called 4 returned 100% blocks executed 62%
        4:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        4:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  111-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        4:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        4:  127-block  0
call    0 returned 4
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE8allocateEyPKv called 3 returned 100% blocks executed 62%
        3:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        3:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  111-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        3:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  127-block  0
call    0 returned 3
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEE8allocateEyPKv called 2 returned 100% blocks executed 62%
        2:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        2:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  111-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        2:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  127-block  0
call    0 returned 2
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 3 returned 100% blocks executed 62%
        3:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        3:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  111-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        3:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  127-block  0
call    0 returned 3
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 3 returned 100% blocks executed 62%
        3:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        3:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  111-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        3:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  127-block  0
call    0 returned 3
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 11 returned 100% blocks executed 62%
       11:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
       11:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
       11:  111-block  0
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
       11:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       11:  127-block  0
call    0 returned 11
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEE8allocateEyPKv called 94 returned 100% blocks executed 62%
       94:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
       94:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
       94:  111-block  0
call    0 returned 94
branch  1 taken 0 (fallthrough)
branch  2 taken 94
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
       94:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       94:  127-block  0
call    0 returned 94
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIcE8allocateEyPKv called 1403 returned 100% blocks executed 83%
     1403:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
     1403:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
     1403:  111-block  0
call    0 returned 1403
branch  1 taken 0 (fallthrough)
branch  2 taken 1403
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
        -:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
        -:  116:	      std::__throw_bad_array_new_length();
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
     1403:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     1403:  127-block  0
call    0 returned 1403
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEE8allocateEyPKv called 4 returned 100% blocks executed 62%
        4:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        4:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        4:  111-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        4:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        4:  127-block  0
call    0 returned 4
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv called 1105 returned 100% blocks executed 62%
     1105:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
     1105:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
     1105:  111-block  0
call    0 returned 1105
branch  1 taken 0 (fallthrough)
branch  2 taken 1105
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
     1105:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
     1105:  127-block  0
call    0 returned 1105
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEE8allocateEyPKv called 2 returned 100% blocks executed 62%
        2:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        2:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  111-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        2:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  127-block  0
call    0 returned 2
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIyE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIyE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE8allocateEyPKv called 14 returned 100% blocks executed 62%
       14:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
       14:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
       14:  111-block  0
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
       14:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       14:  127-block  0
call    0 returned 14
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 62%
        2:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        2:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  111-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        2:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  127-block  0
call    0 returned 2
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPlE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIPlE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorIlE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorIlE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE8allocateEyPKv called 3 returned 100% blocks executed 62%
        3:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        3:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        3:  111-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        3:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  127-block  0
call    0 returned 3
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 22 returned 100% blocks executed 62%
       22:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
       22:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
       22:  111-block  0
call    0 returned 22
branch  1 taken 0 (fallthrough)
branch  2 taken 22
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
       22:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       22:  127-block  0
call    0 returned 22
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 62%
        2:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        2:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  111-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        2:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  127-block  0
call    0 returned 2
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
    #####:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  111-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
    #####:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  127-block  0
call    0 never executed
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 1 returned 100% blocks executed 62%
        1:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        1:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  111-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        1:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  127-block  0
call    0 returned 1
        -:  128:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEE8allocateEyPKv called 2 returned 100% blocks executed 62%
        2:  103:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  104:      {
        -:  105:#if __cplusplus >= 201103L
        -:  106:	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  107:	 // 3308. std::allocator<void>().allocate(n)
        -:  108:	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  109:#endif
        -:  110:
        2:  111:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  111-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  112:	  {
        -:  113:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  114:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  115:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  115-block  0
branch  0 never executed
branch  1 never executed
    #####:  116:	      std::__throw_bad_array_new_length();
    %%%%%:  116-block  0
call    0 never executed
    #####:  117:	    std::__throw_bad_alloc();
    %%%%%:  117-block  0
call    0 never executed
        -:  118:	  }
        -:  119:
        -:  120:#if __cpp_aligned_new
        -:  121:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  122:	  {
        -:  123:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  124:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  125:	  }
        -:  126:#endif
        2:  127:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  127-block  0
call    0 returned 2
        -:  128:      }
------------------
        -:  129:
        -:  130:      // __p is not permitted to be a null pointer.
        -:  131:      void
    2701*:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    2701*:  145:	::operator delete(__p
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEE10deallocateEPSA_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEEEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch12_GLOBAL__N_110ColumnInfoEE10deallocateEPS3_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13SummaryColumnEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch18IStreamingReporterESt14default_deleteIS3_EEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIwE10deallocateEPwy:
function _ZN9__gnu_cxx13new_allocatorIwE10deallocateEPwy called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIKN5Catch20IExceptionTranslatorESt14default_deleteIS4_EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_y:
function _ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16IReporterFactoryEEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorINSt15__exception_ptr13exception_ptrEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11SectionInfoEE10deallocateEPS2_y called 2 returned 100% blocks executed 100%
        2:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        2:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        2:  145:	::operator delete(__p
        2:  145-block  0
call    0 returned 2
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14AssertionStatsEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS3_13JunitReporterEE11SectionNodeEESaIS8_EEE10deallocateEPSA_y:
function _ZN9__gnu_cxx13new_allocatorISt6vectorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS3_13JunitReporterEE11SectionNodeEESaIS8_EEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE10deallocateEPS5_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch8TestSpec7PatternEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEE10deallocateEPSE_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEEEE10deallocateEPSE_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeEEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrIN5Catch6Detail8EnumInfoESt14default_deleteIS4_EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE10deallocateEPSD_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch7TagInfoEEEE10deallocateEPSD_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE10deallocateEPSF_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt10shared_ptrIN5Catch16IReporterFactoryEEEEE10deallocateEPSF_y called 4 returned 100% blocks executed 100%
        4:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        4:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        4:  145:	::operator delete(__p
        4:  145-block  0
call    0 returned 4
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIPKN5Catch8TestCaseEEE10deallocateEPS6_y called 3 returned 100% blocks executed 100%
        3:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        3:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        3:  145:	::operator delete(__p
        3:  145-block  0
call    0 returned 3
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEE10deallocateEPSA_y:
function _ZN9__gnu_cxx13new_allocatorISt10unique_ptrINSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEESt14default_deleteIS7_EEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE10deallocateEPSD_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN5Catch8TagAliasEEEE10deallocateEPSD_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch8TestCaseEEE10deallocateEPS4_y called 3 returned 100% blocks executed 100%
        3:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        3:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        3:  145:	::operator delete(__p
        3:  145-block  0
call    0 returned 3
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIyE10deallocateEPyy:
function _ZN9__gnu_cxx13new_allocatorIyE10deallocateEPyy called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcy:
function _ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcy called 1403 returned 100% blocks executed 100%
     1403:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
     1403:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
     1403:  145:	::operator delete(__p
     1403:  145-block  0
call    0 returned 1403
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_y called 1105 returned 100% blocks executed 100%
     1105:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
     1105:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
     1105:  145:	::operator delete(__p
     1105:  145-block  0
call    0 returned 1105
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE10deallocateEPS5_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6Column8iteratorEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara8TextFlow6ColumnEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail5TokenEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail11HelpColumnsEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3OptEE10deallocateEPS4_y called 94 returned 100% blocks executed 100%
       94:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
       94:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
       94:  145:	::operator delete(__p
       94:  145-block  0
call    0 returned 94
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch5clara6detail3ArgEE10deallocateEPS4_y called 2 returned 100% blocks executed 100%
        2:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        2:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        2:  145:	::operator delete(__p
        2:  145-block  0
call    0 returned 2
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec6FilterEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch9StringRefEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairIiN5Catch9StringRefEEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIN5Catch9VerbosityEEE10deallocateEPS4_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch11MessageInfoEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch13ScopedMessageEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch14SectionEndInfoEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch16TestCaseTracking8ITrackerEE10deallocateEPS4_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestSpec11FilterMatchEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorIPN5Catch10ISingletonEE10deallocateEPS3_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorIN5Catch8TestCaseEE10deallocateEPS2_y called 4 returned 100% blocks executed 100%
        4:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        4:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        4:  145:	::operator delete(__p
        4:  145-block  0
call    0 returned 4
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairIyPKN5Catch8TestCaseEEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE10deallocateEPS5_y:
function _ZN9__gnu_cxx13new_allocatorISt10shared_ptrIN5Catch16TestCaseTracking8ITrackerEEE10deallocateEPS5_y called 14 returned 100% blocks executed 100%
       14:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
       14:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
       14:  145:	::operator delete(__p
       14:  145-block  0
call    0 returned 14
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorIPKN5Catch8TestCaseEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIxEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUliE8_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE9_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIdEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 2 returned 100% blocks executed 100%
        2:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        2:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        2:  145:	::operator delete(__p
        2:  145-block  0
call    0 returned 2
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE0_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE5_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE1_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE2_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE3_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefIjEESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 2 returned 100% blocks executed 100%
        2:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        2:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        2:  145:	::operator delete(__p
        2:  145-block  0
call    0 returned 2
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail11BoundLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_EESaISH_ELNS_12_Lock_policyE2EEE10deallocateEPSK_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt8__detail4_NFAINSt7__cxx1112regex_traitsIcEEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS3_y:
function _ZN9__gnu_cxx13new_allocatorINSt8__detail6_StateIcEEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIccEE10deallocateEPS2_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairIccEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS4_y:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx1112regex_traitsIcE10_RegexMaskEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE10deallocateEPS8_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE10deallocateEPS8_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPlE10deallocateEPS1_y:
function _ZN9__gnu_cxx13new_allocatorIPlE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIlE10deallocateEPly:
function _ZN9__gnu_cxx13new_allocatorIlE10deallocateEPly called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS5_y:
function _ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKllEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE11SectionNodeESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS2_21makeCommandLineParserERNS2_10ConfigDataEEUlbE7_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS1_12basic_stringIcSt11char_traitsIcESaIcEEEEEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_ELNS_12_Lock_policyE2EEE10deallocateEPSA_y called 3 returned 100% blocks executed 100%
        3:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        3:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        3:  145:	::operator delete(__p
        3:  145-block  0
call    0 returned 3
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEE10deallocateEPSF_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEESaISC_ELNS_12_Lock_policyE2EEE10deallocateEPSF_y called 3 returned 100% blocks executed 100%
        3:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        3:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        3:  145:	::operator delete(__p
        3:  145-block  0
call    0 returned 3
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEE10deallocateEPS8_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail12BoundFlagRefESaIS5_ELNS_12_Lock_policyE2EEE10deallocateEPS8_y called 11 returned 100% blocks executed 100%
       11:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
       11:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
       11:  145:	::operator delete(__p
       11:  145-block  0
call    0 returned 11
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch10Generators16GeneratorTrackerESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEE10deallocateEPS6_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch6ConfigESaIS3_ELNS_12_Lock_policyE2EEE10deallocateEPS6_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch16TestCaseTracking14SectionTrackerESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y called 22 returned 100% blocks executed 100%
       22:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
       22:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
       22:  145:	::operator delete(__p
       22:  145-block  0
call    0 returned 22
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec11NamePatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec15ExcludedPatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch8TestSpec10TagPatternESaIS4_ELNS_12_Lock_policyE2EEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail15BoundFlagLambdaIZNS4_4HelpC4ERbEUlbE_EESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEE10deallocateEPSG_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_12TestRunStatsENS6_INS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEEEESaISD_ELNS_12_Lock_policyE2EEE10deallocateEPSG_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEE10deallocateEPSI_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch5clara6detail13BoundValueRefISt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISC_EEEESaISF_ELNS_12_Lock_policyE2EEE10deallocateEPSI_y called 2 returned 100% blocks executed 100%
        2:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        2:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        2:  145:	::operator delete(__p
        2:  145-block  0
call    0 returned 2
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS7_y:
function _ZN9__gnu_cxx13new_allocatorIPNSt8__detail9_StateSeqINSt7__cxx1112regex_traitsIcEEEEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairINS_17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEiEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_y:
function _ZN9__gnu_cxx13new_allocatorISt4pairIlSt6vectorINSt7__cxx119sub_matchINS_17__normal_iteratorIPKcNS3_12basic_stringIcSt11char_traitsIcESaIcEEEEEEESaISE_EEEE10deallocateEPSH_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15CompactReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_15ConsoleReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_13TestCaseStatsENS5_11SectionNodeEEESaIS9_ELNS_12_Lock_policyE2EEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEE10deallocateEPSE_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch22CumulativeReporterBaseINS2_13JunitReporterEE4NodeINS2_14TestGroupStatsENS6_INS2_13TestCaseStatsENS5_11SectionNodeEEEEESaISB_ELNS_12_Lock_policyE2EEE10deallocateEPSE_y called 0 returned 0% blocks executed 0%
    #####:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    %%%%%:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
    #####:  145:	::operator delete(__p
    %%%%%:  145-block  0
call    0 never executed
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_13JunitReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y:
function _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceIN5Catch17ReporterRegistrarINS2_11XmlReporterEE15ReporterFactoryESaIS6_ELNS_12_Lock_policyE2EEE10deallocateEPS9_y called 1 returned 100% blocks executed 100%
        1:  132:      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
        1:  132-block  0
        -:  133:      {
        -:  134:#if __cpp_aligned_new
        -:  135:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  136:	  {
        -:  137:	    ::operator delete(__p,
        -:  138:# if __cpp_sized_deallocation
        -:  139:			      __t * sizeof(_Tp),
        -:  140:# endif
        -:  141:			      std::align_val_t(alignof(_Tp)));
        -:  142:	    return;
        -:  143:	  }
        -:  144:#endif
        1:  145:	::operator delete(__p
        1:  145-block  0
call    0 returned 1
        -:  146:#if __cpp_sized_deallocation
        -:  147:			  , __t * sizeof(_Tp)
        -:  148:#endif
        -:  149:			 );
        -:  150:      }
------------------
        -:  151:
        -:  152:#if __cplusplus <= 201703L
        -:  153:      size_type
        -:  154:      max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  155:      { return _M_max_size(); }
        -:  156:
        -:  157:#if __cplusplus >= 201103L
        -:  158:      template<typename _Up, typename... _Args>
        -:  159:	void
        -:  160:	construct(_Up* __p, _Args&&... __args)
        -:  161:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
        -:  162:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        -:  163:
        -:  164:      template<typename _Up>
        -:  165:	void
        -:  166:	destroy(_Up* __p)
        -:  167:	noexcept(std::is_nothrow_destructible<_Up>::value)
        -:  168:	{ __p->~_Up(); }
        -:  169:#else
        -:  170:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  171:      // 402. wrong new expression in [some_] allocator::construct
        -:  172:      void
        -:  173:      construct(pointer __p, const _Tp& __val)
        -:  174:      { ::new((void *)__p) _Tp(__val); }
        -:  175:
        -:  176:      void
        -:  177:      destroy(pointer __p) { __p->~_Tp(); }
        -:  178:#endif
        -:  179:#endif // ! C++20
        -:  180:
        -:  181:      template<typename _Up>
        -:  182:	friend _GLIBCXX20_CONSTEXPR bool
        -:  183:	operator==(const new_allocator&, const new_allocator<_Up>&)
        -:  184:	_GLIBCXX_NOTHROW
        -:  185:	{ return true; }
        -:  186:
        -:  187:#if __cpp_impl_three_way_comparison < 201907L
        -:  188:      template<typename _Up>
        -:  189:	friend _GLIBCXX20_CONSTEXPR bool
        -:  190:	operator!=(const new_allocator&, const new_allocator<_Up>&)
        -:  191:	_GLIBCXX_NOTHROW
        -:  192:	{ return false; }
        -:  193:#endif
        -:  194:
        -:  195:    private:
        -:  196:      _GLIBCXX_CONSTEXPR size_type
    2701*:  197:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  198:      {
        -:  199:#if __PTRDIFF_MAX__ < __SIZE_MAX__
    2701*:  200:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
        -:  201:#else
        -:  202:	return std::size_t(-1) / sizeof(_Tp);
        -:  203:#endif
        -:  204:      }
        -:  205:    };
        -:  206:
        -:  207:_GLIBCXX_END_NAMESPACE_VERSION
        -:  208:} // namespace
        -:  209:
        -:  210:#endif
